# Test that the start command starts a cluster and reports to the user
# that a node crashed, and does not log the crashed node in the stats.log file.
# Test that the start command can start a node in the crashed state, and
# that it sends a crash report.  Test that the start command returns nonzero
# exit status when not all nodes start successfully.
#
# @TEST-EXEC: bash %INPUT
# @TEST-EXEC: btest-diff start1.out
# @TEST-EXEC: TEST_DIFF_CANONIFIER=$SCRIPTS/diff-status-output btest-diff status1.out
# @TEST-EXEC: btest-diff start2.out
# @TEST-EXEC: TEST_DIFF_CANONIFIER=$SCRIPTS/diff-status-output btest-diff status2.out

. broctl-test-setup

while read line; do installcfgfile "$line"; done << EOF
etc/broctl.cfg__test_sendmail
etc/node.cfg__cluster
bin/bro__test
bin/sendmail__test --new
EOF

replaceprefix etc/broctl.cfg

cat > $BROCTL_INSTALL_PREFIX/broctltest.cfg << EOF
crash=worker-1
EOF

ret=0
broctl install

# start all nodes, and one will crash
broctl start 2> start1.out
test $? -ne 0 || ret=1

# the crashed node should not be logged as "started" in stats.log
grep started $BROCTL_INSTALL_PREFIX/spool/stats.log | grep worker-1 && ret=1

# verify that a node is in the crashed state
broctl status 2> status1.out

# this time we don't want it to crash
rm -f $BROCTL_INSTALL_PREFIX/broctltest.cfg

# verify that no email has been sent
test ! -e $BROCTL_INSTALL_PREFIX/sendmail.out || ret=1

# try to start a node in the "crashed" state
broctl start 2> start2.out

# verify that a crash report was sent
grep -q "Crash report from worker-1" $BROCTL_INSTALL_PREFIX/sendmail.out || ret=1

# verify that all nodes are running
broctl status 2> status2.out

broctl stop

exit $ret

